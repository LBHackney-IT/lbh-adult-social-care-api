service: lbh-adult-social-care-functions-payruns
provider:
  name: aws
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - "sqs:GetQueueUrl"
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
        - "sqs:GetQueueAttributes"
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:sqs'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'lbh-adult-social-care-payruns'
  runtime: dotnetcore3.1
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  # TODO: Enable this line if DynamoDb is in use
  #account: ${opt:account}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

package:
# TODO: Rename zipfile in build.sh and build.cmd to match this
  artifact: ./bin/release/netcoreapp3.1/lbh-adult-social-care-functions-payruns.zip

functions:
  AdultSocialCarePayruns:
    name: ${self:service}-${self:provider.stage}
    handler: LBH.AdultSocialCare.Functions.Payruns::LBH.AdultSocialCare.Functions.Payruns.LambdaEntryPoint::HandleEvent
    role: lambdaExecutionRole
    environment:
      ConnectionStrings__Default: Host=${ssm:/hasc-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/hasc-api/${self:provider.stage}/postgres-port};Database=${ssm:/hasc-api/${self:provider.stage}/postgres-database};Username=${ssm:/hasc-api/${self:provider.stage}/postgres-username};Password=${ssm:/hasc-api/${self:provider.stage}/postgres-password}
    events:
      - sqs:
        arn:
          Fn::Join:
            - ':'
            - - 'arn:aws:sqs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'lbh-adult-social-care-payruns'
resources:
  Resources:
    sqsCreateMappingPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:CreateEventSourceMapping"
        FunctionName: ${self:service}-${self:provider.stage}
        Principal: "sqs.amazonaws.com"
    sqsListMappingsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:ListEventSourceMappings"
        FunctionName: ${self:service}-${self:provider.stage}
        Principal: "sqs.amazonaws.com"
    sqsListFunctionsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:ListFunctions"
        FunctionName: ${self:service}-${self:provider.stage}
        Principal: "sqs.amazonaws.com"
    sqsLambdaMapping:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        EventSourceArn:
          Fn::Join:
            - ':'
            - - 'arn:aws:sqs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'lbh-adult-social-care-payruns'
        FunctionName: ${self:service}-${self:provider.stage}
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
#          - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: sqsOperations
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sqs:GetQueueUrl"
                    - "sqs:ReceiveMessage"
                    - "sqs:DeleteMessage"
                    - "sqs:GetQueueAttributes"
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:sqs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'lbh-adult-social-care-payruns'

custom:
  vpc:
    development:
      securityGroupIds:
        - sg-
      subnetIds:
        - subnet-0d4086ab96db46047
        - subnet-0f5eeab6b619d5e1a
    staging:
      securityGroupIds:
        - sg-0630857460fcc6b3e
      subnetIds:
        - subnet-0d4086ab96db46047
        - subnet-0f5eeab6b619d5e1a
    production:
      securityGroupIds:
        - sg-02ffd48e7f2c805f8
      subnetIds:
        - subnet-0c39cd286eeaff2b2
        - subnet-04c42d0aafb3738ad
