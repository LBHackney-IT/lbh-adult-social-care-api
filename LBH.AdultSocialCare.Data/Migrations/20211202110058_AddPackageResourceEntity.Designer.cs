// <auto-generated />
using System;
using LBH.AdultSocialCare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LBH.AdultSocialCare.Api.V1.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211202110058_AddPackageResourceEntity")]
    partial class AddPackageResourceEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BrokerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DateApproved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateAssigned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PackageScheduling")
                        .HasColumnType("integer");

                    b.Property<int>("PackageType")
                        .HasColumnType("integer");

                    b.Property<int?>("PrimarySupportReasonId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServiceUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SocialWorkerCarePlanFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("SocialWorkerCarePlanFileName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PrimarySupportReasonId");

                    b.HasIndex("ServiceUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackages");

                    b.HasCheckConstraint("CK_CarePackages_PackageScheduling", "\"PackageScheduling\" IN (0, 1, 2, 3)");

                    b.HasCheckConstraint("CK_CarePackages_PackageType", "\"PackageType\" IN (0, 2, 4)");

                    b.HasCheckConstraint("CK_CarePackages_Status", "\"Status\" IN (0, 1, 2, 3, 4, 5, 6, 7, 8)");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarePackageId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<int>("CostPeriod")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServicePeriod")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageDetails");

                    b.HasCheckConstraint("CK_CarePackageDetails_CostPeriod", "\"CostPeriod\" IN (0, 1, 2, 3, 4)");

                    b.HasCheckConstraint("CK_CarePackageDetails_ServicePeriod", "\"ServicePeriod\" IN (0, 1, 2, 3, 4)");

                    b.HasCheckConstraint("CK_CarePackageDetails_Type", "\"Type\" IN (0, 1, 2)");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CarePackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("RequestMoreInformation")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageHistories");

                    b.HasCheckConstraint("CK_CarePackageHistories_Status", "\"Status\" IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageReclaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssessmentFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("AssessmentFileName")
                        .HasColumnType("text");

                    b.Property<Guid>("CarePackageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ClaimCollector")
                        .HasColumnType("integer");

                    b.Property<string>("ClaimReason")
                        .HasColumnType("text");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SubType")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageReclaims");

                    b.HasCheckConstraint("CK_CarePackageReclaims_ClaimCollector", "\"ClaimCollector\" IN (0, 1, 2)");

                    b.HasCheckConstraint("CK_CarePackageReclaims_Status", "\"Status\" IN (0, 1, 2, 3, 4)");

                    b.HasCheckConstraint("CK_CarePackageReclaims_SubType", "\"SubType\" IN (0, 1, 2, 3)");

                    b.HasCheckConstraint("CK_CarePackageReclaims_Type", "\"Type\" IN (0, 1, 2)");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageResources");

                    b.HasCheckConstraint("CK_CarePackageResources_Type", "\"Type\" IN (0, 1, 2, 3)");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageSchedulingOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.Property<string>("OptionPeriod")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarePackageSchedulingOptions");

                    b.HasCheckConstraint("CK_CarePackageSchedulingOptions_Id", "\"Id\" IN (0, 1, 2, 3)");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OptionName = "Interim or immediate service",
                            OptionPeriod = "6 weeks and under"
                        },
                        new
                        {
                            Id = 2,
                            OptionName = "Temporary",
                            OptionPeriod = "Expected 52 weeks or under"
                        },
                        new
                        {
                            Id = 3,
                            OptionName = "Long term",
                            OptionPeriod = "52+ weeks"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarePackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasDischargePackage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasRespiteCare")
                        .HasColumnType("boolean");

                    b.Property<bool>("HospitalAvoidance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReEnablement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsS117Client")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsS117ClientConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageId")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageSettings");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            RoleId = new Guid("7335e791-1d08-437a-974e-809944d29bc6")
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.FundedNursingCarePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PricePerWeek")
                        .HasColumnType("decimal(13, 2)");

                    b.HasKey("Id");

                    b.ToTable("FundedNursingCarePrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveFrom = new DateTimeOffset(new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ActiveTo = new DateTimeOffset(new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PricePerWeek = 187.6m
                        },
                        new
                        {
                            Id = 2,
                            ActiveFrom = new DateTimeOffset(new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ActiveTo = new DateTimeOffset(new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PricePerWeek = 187.6m
                        },
                        new
                        {
                            Id = 3,
                            ActiveFrom = new DateTimeOffset(new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ActiveTo = new DateTimeOffset(new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PricePerWeek = 187.6m
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.PackageStatusOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("StatusDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PackageStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusDisplayName = "New",
                            StatusName = "New"
                        },
                        new
                        {
                            Id = 2,
                            StatusDisplayName = "In Progress",
                            StatusName = "InProgress"
                        },
                        new
                        {
                            Id = 3,
                            StatusDisplayName = "Waiting for approval",
                            StatusName = "SubmittedForApproval"
                        },
                        new
                        {
                            Id = 4,
                            StatusDisplayName = "Approved",
                            StatusName = "Approved"
                        },
                        new
                        {
                            Id = 5,
                            StatusDisplayName = "Not Approved",
                            StatusName = "NotApproved"
                        },
                        new
                        {
                            Id = 6,
                            StatusDisplayName = "Ended",
                            StatusName = "Ended"
                        },
                        new
                        {
                            Id = 7,
                            StatusDisplayName = "Cancelled",
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            Id = 8,
                            StatusDisplayName = "Rejected",
                            StatusName = "Rejected"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.PrimarySupportReason", b =>
                {
                    b.Property<int>("PrimarySupportReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CederBudgetCode")
                        .HasColumnType("text");

                    b.Property<string>("PrimarySupportReasonName")
                        .HasColumnType("text");

                    b.HasKey("PrimarySupportReasonId");

                    b.ToTable("PrimarySupportReasons");

                    b.HasData(
                        new
                        {
                            PrimarySupportReasonId = 1,
                            CederBudgetCode = "D0822",
                            PrimarySupportReasonName = "Physical Support"
                        },
                        new
                        {
                            PrimarySupportReasonId = 2,
                            CederBudgetCode = "D0823",
                            PrimarySupportReasonName = "Sensory Support"
                        },
                        new
                        {
                            PrimarySupportReasonId = 3,
                            CederBudgetCode = "D0824",
                            PrimarySupportReasonName = "Support with memory and cognition"
                        },
                        new
                        {
                            PrimarySupportReasonId = 4,
                            CederBudgetCode = "D0825",
                            PrimarySupportReasonName = "Learning Disability Support"
                        },
                        new
                        {
                            PrimarySupportReasonId = 5,
                            CederBudgetCode = "D0826",
                            PrimarySupportReasonName = "Mental Health Support (ASC)"
                        },
                        new
                        {
                            PrimarySupportReasonId = 6,
                            CederBudgetCode = "D0828",
                            PrimarySupportReasonName = "Social Support"
                        },
                        new
                        {
                            PrimarySupportReasonId = 7,
                            CederBudgetCode = "D0829",
                            PrimarySupportReasonName = "Mental Health Support (ELFT)"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.ProvisionalCareChargeAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgeFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeTo")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProvisionalCareChargeAmounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeFrom = 18,
                            AgeTo = 24,
                            Amount = 68.95m,
                            EndDate = new DateTimeOffset(new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            AgeFrom = 25,
                            AgeTo = 59,
                            Amount = 84.40m,
                            EndDate = new DateTimeOffset(new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            AgeFrom = 60,
                            Amount = 148.45m,
                            EndDate = new DateTimeOffset(new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            AgeFrom = 18,
                            AgeTo = 24,
                            Amount = 69.40m,
                            EndDate = new DateTimeOffset(new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            AgeFrom = 25,
                            AgeTo = 59,
                            Amount = 84.90m,
                            EndDate = new DateTimeOffset(new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            AgeFrom = 60,
                            Amount = 152.20m,
                            EndDate = new DateTimeOffset(new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7335e791-1d08-437a-974e-809944d29bc6"),
                            ConcurrencyStamp = "1",
                            Name = "Super User",
                            NormalizedName = "SUPER USER"
                        },
                        new
                        {
                            Id = new Guid("97c46919-fd10-47f1-bcb9-fa6b513c4c83"),
                            ConcurrencyStamp = "2",
                            Name = "Brokerage",
                            NormalizedName = "BROKERAGE"
                        },
                        new
                        {
                            Id = new Guid("d7cb6746-1211-4cc2-9244-f4faaef25089"),
                            ConcurrencyStamp = "3",
                            Name = "Brokerage Approver",
                            NormalizedName = "BROKERAGE APPROVER"
                        },
                        new
                        {
                            Id = new Guid("74b93ac7-1778-485d-a482-d76893f31aff"),
                            ConcurrencyStamp = "4",
                            Name = "Finance",
                            NormalizedName = "FINANCE"
                        },
                        new
                        {
                            Id = new Guid("80f1ea68-9335-4efe-b247-7aa58cc45af0"),
                            ConcurrencyStamp = "5",
                            Name = "Finance Approver",
                            NormalizedName = "FINANCE APPROVER"
                        },
                        new
                        {
                            Id = new Guid("7b955348-e506-4c93-abc4-64d27d559f41"),
                            ConcurrencyStamp = "6",
                            Name = "Care Charge Manager",
                            NormalizedName = "CARE CHARGE MANAGER"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.ServiceUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("CanSpeakEnglish")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("HackneyId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<string>("PreferredContact")
                        .HasColumnType("text");

                    b.Property<int?>("PrimarySupportReasonId")
                        .HasColumnType("integer");

                    b.Property<string>("Town")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PrimarySupportReasonId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("ServiceUsers");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("CedarId")
                        .HasColumnType("integer");

                    b.Property<string>("CedarName")
                        .HasColumnType("text");

                    b.Property<string>("CedarReferenceNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Abbeleigh House",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Abbeleigh House"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Abbey Care Complex",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Abbey Care Complex"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Acacia Lodge [Cedar Site 0]",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Acacia Lodge"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Hc-One Limited",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Hc-One Limited"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Acorn Lodge",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Acorn Lodge"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Albany Nursing Home",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Albany Nursing Home"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Manor Farm Care Home",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Manor Farm Care Home"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Four Seasons Health Care [Cedar Site 8] Lingfield Point",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Four Seasons Health Care"
                        },
                        new
                        {
                            Id = 9,
                            Address = "The Hornchurch Care Home",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "The Hornchurch Care Home"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Bupa Care Homes [Cedar Site 10] Wynne Road",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SupplierName = "Bupa Care Homes"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b3d758b-924a-482c-af77-e31711a74a2f",
                            Email = "test@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Test User",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "test@gmail.com"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Brokerage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.HeldInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActionRequiredFromId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PayRunInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReasonForHolding")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionRequiredFromId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PayRunInvoiceId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("HeldInvoices");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GrossTotal")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CarePackageDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CarePackageReclaimId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ClaimCollector")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("NetCostsCompensated")
                        .HasColumnType("boolean");

                    b.Property<int>("PriceEffect")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<long>("SourceVersion")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("WeeklyCost")
                        .HasColumnType("decimal(13, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageDetailId");

                    b.HasIndex("CarePackageReclaimId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("InvoiceItems");

                    b.HasCheckConstraint("CK_InvoiceItems_ClaimCollector", "\"ClaimCollector\" IN (1, 2)");

                    b.HasCheckConstraint("CK_InvoiceItems_PriceEffect", "\"PriceEffect\" IN (0, 1, 2, 3)");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.Payrun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Held")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<decimal?>("Paid")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<DateTime>("PaidUpToDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("UpdaterId");

                    b.ToTable("Payruns");

                    b.HasCheckConstraint("CK_Payruns_Status", "\"Status\" IN (0, 1, 2, 3, 4, 5, 6, 7, 8)");

                    b.HasCheckConstraint("CK_Payruns_Type", "\"Type\" IN (0, 1, 2, 3, 4)");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.PayrunHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PayRunId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PayRunId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("PayrunHistories");

                    b.HasCheckConstraint("CK_PayrunHistories_Status", "\"Status\" IN (0, 1, 2, 3, 4, 5, 6, 7, 8)");

                    b.HasCheckConstraint("CK_PayrunHistories_Type", "\"Type\" IN (0, 1, 2, 3)");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.PayrunInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("PayrunId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UpdaterId");

                    b.HasIndex("PayrunId", "InvoiceId")
                        .IsUnique();

                    b.ToTable("PayrunInvoices");

                    b.HasCheckConstraint("CK_PayrunInvoices_InvoiceStatus", "\"InvoiceStatus\" IN (0, 1, 2, 3, 4, 5, 6)");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId");

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.PrimarySupportReason", "PrimarySupportReason")
                        .WithMany()
                        .HasForeignKey("PrimarySupportReasonId");

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.ServiceUser", "ServiceUser")
                        .WithMany()
                        .HasForeignKey("ServiceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageDetail", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackage", "Package")
                        .WithMany("Details")
                        .HasForeignKey("CarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageHistory", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackage", "CarePackage")
                        .WithMany("Histories")
                        .HasForeignKey("CarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageReclaim", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackage", "Package")
                        .WithMany("Reclaims")
                        .HasForeignKey("CarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageResource", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageSettings", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackage", "Package")
                        .WithOne("Settings")
                        .HasForeignKey("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageSettings", "CarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.AppUserRole", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.ServiceUser", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.PrimarySupportReason", "PrimarySupportReason")
                        .WithMany()
                        .HasForeignKey("PrimarySupportReasonId");

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Common.Supplier", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.HeldInvoice", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Payments.Department", "ActionDepartment")
                        .WithMany()
                        .HasForeignKey("ActionRequiredFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Payments.PayrunInvoice", "PayrunInvoice")
                        .WithMany()
                        .HasForeignKey("PayRunInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.Invoice", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackage", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.ServiceUser", "ServiceUser")
                        .WithMany()
                        .HasForeignKey("ServiceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.InvoiceItem", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageDetail", "CarePackageDetail")
                        .WithMany()
                        .HasForeignKey("CarePackageDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.CarePackages.CarePackageReclaim", "CarePackageReclaim")
                        .WithMany()
                        .HasForeignKey("CarePackageReclaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Payments.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.Payrun", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.PayrunHistory", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Payments.Payrun", "Payrun")
                        .WithMany("Histories")
                        .HasForeignKey("PayRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Data.Entities.Payments.PayrunInvoice", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Payments.Invoice", "Invoice")
                        .WithMany("PayrunInvoices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Payments.Payrun", "Payrun")
                        .WithMany("PayrunInvoices")
                        .HasForeignKey("PayrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Data.Entities.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
