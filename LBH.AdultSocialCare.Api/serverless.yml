service: lbh-adult-social-care-api
provider:
  name: aws
  runtime: dotnetcore3.1
  memorySize: 2048
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  # TODO: Enable this line if DynamoDb is in use
  #account: ${opt:account}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

package:
# TODO: Rename zipfile in build.sh and build.cmd to match this
  artifact: ./bin/release/netcoreapp3.1/hasc.zip

functions:
  AdultSocialCareApi:
    name: ${self:service}-${self:provider.stage}
    handler: LBH.AdultSocialCare.Api::LBH.AdultSocialCare.Api.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
        CONNECTION_STRING: Host=${ssm:/hasc-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/hasc-api/${self:provider.stage}/postgres-port};Database=${ssm:/hasc-api/${self:provider.stage}/postgres-database};Username=${ssm:/hasc-api/${self:provider.stage}/postgres-username};Password=${ssm:/hasc-api/${self:provider.stage}/postgres-password}
        HASCHttpClients__TransactionsBaseUrl: ${ssm:/hasc-api/${self:provider.stage}/TRANSACTIONS-BASE-URL}
        HASCHttpClients__TransactionsApiKey: ${ssm:/hasc-api/${self:provider.stage}/TRANSACTIONS-API-KEY}
        ResidentsAPI__BaseUrl: ${ssm:/hasc-api/${self:provider.stage}/RESIDENTS-BASE-URL}
        ResidentsAPI__ApiKey: ${ssm:/hasc-api/${self:provider.stage}/RESIDENTS-API-KEY}
        PayrunsQueue__Url: ${ssm:/hasc-api/${self:provider.stage}/PAYRUNS-QUEUE-URL}
        AWS__Region: ${self:provider.region}
        DocumentAPI__BaseUrl: ${ssm:/hasc-api/${self:provider.stage}/DOCUMENTS-BASE-URL}
        DocumentAPI__ClaimBearerToken: ${ssm:/hasc-api/${self:provider.stage}/DOCUMENTAPI-POST-CLAIM-TOKEN}
        DocumentAPI__PostBearerToken: ${ssm:/hasc-api/${self:provider.stage}/DOCUMENTAPI-POST-DOCUMENT-TOKEN}
        DocumentAPI__GetBearerToken: ${ssm:/hasc-api/${self:provider.stage}/DOCUMENTSAPI-GET-DOCUMENT-TOKEN}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: false
      - http:
          path: /swagger/{proxy+}
          method: GET
          private: false
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
# TODO: Enable this line and set the correct policy name if DynamoDb is in use
#          - arn:aws:iam::${self:provider.account}:policy/base-api/lambda-dynamodb-base-api
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: sqsOperations
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sqs:GetQueueUrl"
                    - "sqs:SendMessage"
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:sqs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - lbh-adult-social-care-payruns-${self:provider.stage}
custom:
  vpc:
    development:
      securityGroupIds:
        - sg-
      subnetIds:
        - subnet-0d4086ab96db46047
        - subnet-0f5eeab6b619d5e1a
    staging:
      securityGroupIds:
        - sg-0630857460fcc6b3e
      subnetIds:
        - subnet-0d4086ab96db46047
        - subnet-0f5eeab6b619d5e1a
    production:
      securityGroupIds:
        - sg-02ffd48e7f2c805f8
      subnetIds:
        - subnet-0c39cd286eeaff2b2
        - subnet-04c42d0aafb3738ad
