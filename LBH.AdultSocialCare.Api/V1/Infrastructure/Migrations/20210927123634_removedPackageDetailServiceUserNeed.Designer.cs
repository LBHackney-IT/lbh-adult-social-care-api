// <auto-generated />
using System;
using LBH.AdultSocialCare.Api.V1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LBH.AdultSocialCare.Api.V1.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210927123634_removedPackageDetailServiceUserNeed")]
    partial class removedPackageDetailServiceUserNeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.AdditionalNeedsPaymentType", b =>
                {
                    b.Property<int>("AdditionalNeedsPaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.HasKey("AdditionalNeedsPaymentTypeId");

                    b.ToTable("AdditionalNeedsPaymentTypes");

                    b.HasData(
                        new
                        {
                            AdditionalNeedsPaymentTypeId = 1,
                            OptionName = "Weekly"
                        },
                        new
                        {
                            AdditionalNeedsPaymentTypeId = 2,
                            OptionName = "One Off"
                        },
                        new
                        {
                            AdditionalNeedsPaymentTypeId = 3,
                            OptionName = "Fixed Period"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.CareChargeElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<Guid>("CareChargeId")
                        .HasColumnType("uuid");

                    b.Property<int>("ClaimCollectorId")
                        .HasColumnType("integer");

                    b.Property<string>("ClaimReasons")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaidUpTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("PreviousPaidUpTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CareChargeId");

                    b.HasIndex("ClaimCollectorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CareChargeElements");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.CareChargeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CareChargeStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Active"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Ended"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "Future"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.CareChargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CareChargeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OptionName = "Provisional"
                        },
                        new
                        {
                            Id = 2,
                            OptionName = "Without Property 1-12 Weeks"
                        },
                        new
                        {
                            Id = 3,
                            OptionName = "Without Property 13+ Weeks"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.InvoiceCreditNote", b =>
                {
                    b.Property<Guid>("InvoiceCreditNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<Guid?>("CareChargeElementId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChargeTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ClaimCollectorId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasBeenAddedToUserInvoice")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PriceEffectId")
                        .HasColumnType("integer");

                    b.Property<bool>("SentOrInvoiced")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ServiceUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("InvoiceCreditNoteId");

                    b.HasIndex("CareChargeElementId");

                    b.HasIndex("ChargeTypeId");

                    b.HasIndex("ClaimCollectorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PackageTypeId");

                    b.HasIndex("PriceEffectId");

                    b.HasIndex("ServiceUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("InvoiceCreditNotes");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.InvoiceItemPriceEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EffectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InvoiceItemPriceEffects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EffectName = "None"
                        },
                        new
                        {
                            Id = 2,
                            EffectName = "Add"
                        },
                        new
                        {
                            Id = 3,
                            EffectName = "Subtract"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.InvoiceNoteChargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChargeTypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InvoiceNoteChargeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargeTypeName = "OverCharge"
                        },
                        new
                        {
                            Id = 2,
                            ChargeTypeName = "UnderCharge"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.PackageCareCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsProvisional")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServiceUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PackageTypeId");

                    b.HasIndex("ServiceUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("PackageCareCharges");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.ProvisionalCareChargeAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgeFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeTo")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProvisionalCareChargeAmounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeFrom = 18,
                            AgeTo = 24,
                            Amount = 68.95m,
                            EndDate = new DateTimeOffset(new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            AgeFrom = 25,
                            AgeTo = 59,
                            Amount = 84.40m,
                            EndDate = new DateTimeOffset(new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            AgeFrom = 60,
                            Amount = 148.45m,
                            EndDate = new DateTimeOffset(new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            AgeFrom = 18,
                            AgeTo = 24,
                            Amount = 69.40m,
                            EndDate = new DateTimeOffset(new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            AgeFrom = 25,
                            AgeTo = 59,
                            Amount = 84.90m,
                            EndDate = new DateTimeOffset(new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            AgeFrom = 60,
                            Amount = 152.20m,
                            EndDate = new DateTimeOffset(new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("CanSpeakEnglish")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("HackneyId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<string>("PreferredContact")
                        .HasColumnType("text");

                    b.Property<int?>("PrimarySupportReasonId")
                        .HasColumnType("integer");

                    b.Property<string>("Town")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PrimarySupportReasonId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb80"),
                            AddressLine1 = "Queens Town Road",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Furkan",
                            HackneyId = 66666,
                            LastName = "Kayar",
                            PostCode = "SW11",
                            PreferredContact = "Phone",
                            Town = "London"
                        },
                        new
                        {
                            Id = new Guid("2f043f6f-09ed-42f0-ab30-c0409c05cb7e"),
                            AddressLine1 = "Old Town Road",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Henry",
                            HackneyId = 55555,
                            LastName = "Ford",
                            PostCode = "SW16",
                            PreferredContact = "Phone",
                            Town = "Bristol"
                        },
                        new
                        {
                            Id = new Guid("91990f8a-b325-43eb-8482-0d1c7dcf8cd5"),
                            AddressLine1 = "Z Street",
                            CanSpeakEnglish = "Mid-Level",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Allie",
                            HackneyId = 65653,
                            LastName = "Grater",
                            PostCode = "W4",
                            PreferredContact = "Phone",
                            Town = "Ealing"
                        },
                        new
                        {
                            Id = new Guid("6691fbfc-e398-41e0-8733-9ae98ebe2ba8"),
                            AddressLine1 = "XX Road",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Constance",
                            HackneyId = 88888,
                            LastName = "Noring",
                            PostCode = "C2",
                            PreferredContact = "Phone",
                            Town = "Cardiff"
                        },
                        new
                        {
                            Id = new Guid("a99f4b55-7c49-4bad-a338-86c6d79dfe36"),
                            AddressLine1 = "YY Street",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Isabelle",
                            HackneyId = 99999,
                            LastName = "Ringing",
                            PostCode = "N7",
                            PreferredContact = "Phone",
                            Town = "Norwich"
                        },
                        new
                        {
                            Id = new Guid("61e8b256-3bb6-42a2-9d24-38a44a3bd5f2"),
                            AddressLine1 = "Old Trafford",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Harriet",
                            HackneyId = 11111,
                            LastName = "Upp",
                            PostCode = "M8",
                            PreferredContact = "Phone",
                            Town = "Manchester"
                        },
                        new
                        {
                            Id = new Guid("de846662-e8fe-4c47-bd0a-20113b71e02d"),
                            AddressLine1 = "Anfield",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Willie",
                            HackneyId = 22222,
                            LastName = "Makit",
                            PostCode = "L9",
                            PreferredContact = "Mail",
                            Town = "Liverpool"
                        },
                        new
                        {
                            Id = new Guid("0c6edb1d-799b-4ce3-98a8-e6fe271c4a8f"),
                            AddressLine1 = "New Road",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Mark",
                            HackneyId = 33322,
                            LastName = "Ateer",
                            PostCode = "I12",
                            PreferredContact = "Phone",
                            Town = "Ipswich"
                        },
                        new
                        {
                            Id = new Guid("9a84d6c3-e570-4f30-8bb2-80425d6f8e60"),
                            AddressLine1 = "Y Street",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1958, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Colin",
                            HackneyId = 10532,
                            LastName = "Edmunds",
                            PostCode = "B4",
                            PreferredContact = "Phone",
                            Town = "Brighton"
                        },
                        new
                        {
                            Id = new Guid("14ffd252-a98b-4489-ab58-6db72ed317c6"),
                            AddressLine1 = "X Town",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1944, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Tim",
                            HackneyId = 57806,
                            LastName = "Gray",
                            PostCode = "W2",
                            PreferredContact = "Phone",
                            Town = "Watford"
                        },
                        new
                        {
                            Id = new Guid("3c96cc5b-557e-42eb-957b-f9b0b7302ad7"),
                            AddressLine1 = "X Road",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1950, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Jake",
                            HackneyId = 33322,
                            LastName = "Hart",
                            PostCode = "D1",
                            PreferredContact = "Phone",
                            Town = "Dorset"
                        },
                        new
                        {
                            Id = new Guid("dde0741c-f9a9-4d42-b889-a1d17864d77e"),
                            AddressLine1 = "New Town",
                            CanSpeakEnglish = "Fluent",
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1940, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Emma",
                            HackneyId = 66779,
                            LastName = "Coleman",
                            PostCode = "E1",
                            PreferredContact = "Phone",
                            Town = "Newcastle"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PackageScheduling")
                        .HasColumnType("integer");

                    b.Property<int>("PackageType")
                        .HasColumnType("integer");

                    b.Property<int>("PrimarySupportReasonId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServiceUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PrimarySupportReasonId");

                    b.HasIndex("ServiceUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarePackageId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<int>("CostPeriod")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServicePeriod")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageDetails");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CarePackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("RequestMoreInformation")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageHistories");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageReclaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssessmentFileUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("CarePackageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ClaimCollector")
                        .HasColumnType("integer");

                    b.Property<string>("ClaimReason")
                        .HasColumnType("text");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SubType")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageReclaims");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageSchedulingOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.Property<string>("OptionPeriod")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarePackageSchedulingOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OptionName = "Interim or immediate service",
                            OptionPeriod = "6 weeks and under"
                        },
                        new
                        {
                            Id = 2,
                            OptionName = "Temporary",
                            OptionPeriod = "Expected 52 weeks or under"
                        },
                        new
                        {
                            Id = 3,
                            OptionName = "Long term",
                            OptionPeriod = "52+ weeks"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarePackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasDischargePackage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasRespiteCare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImmediate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReEnablement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsS117Client")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarePackageId")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CarePackageSettings");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.DayCareApprovalHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatorRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("LogSubText")
                        .HasColumnType("text");

                    b.Property<string>("LogText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PackageStatusId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("HistoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DayCarePackageId");

                    b.HasIndex("PackageStatusId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("DayCareApprovalHistory");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.DayCarePackageStatus", b =>
                {
                    b.Property<int>("PackageStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDayCareStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStatusActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PackageAction")
                        .HasColumnType("text");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Stage")
                        .HasColumnType("text");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("PackageStatusId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.HasIndex("SequenceNumber", "Stage", "PackageAction")
                        .IsUnique();

                    b.ToTable("DayCarePackageStatuses");

                    b.HasData(
                        new
                        {
                            PackageStatusId = 1,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Created",
                            SequenceNumber = 1,
                            Stage = "PACKAGE BUILDER",
                            StatusName = "New Package",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 2,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "New",
                            SequenceNumber = 2,
                            Stage = "NEW PACKAGE DETAIL APPROVAL",
                            StatusName = "Submitted for Approval",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 3,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Approve",
                            SequenceNumber = 3,
                            Stage = "PACKAGE DETAIL APPROVAL",
                            StatusName = "Contents Approved",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 4,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Reject",
                            SequenceNumber = 3,
                            Stage = "PACKAGE DETAIL APPROVAL",
                            StatusName = "Reject Package",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 5,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Request More Information",
                            SequenceNumber = 3,
                            Stage = "PACKAGE DETAIL APPROVAL",
                            StatusName = "Clarification Needed",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 6,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "New",
                            SequenceNumber = 4,
                            Stage = "NEW BROKERAGE",
                            StatusName = "Brokerage - New",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 7,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Assigned",
                            SequenceNumber = 5,
                            Stage = "NEW BROKERAGE",
                            StatusName = "Brokerage - Assigned",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 8,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Querying",
                            SequenceNumber = 6,
                            Stage = "PACKAGE BROKERING",
                            StatusName = "Brokerage - Querying",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 9,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "SupplierSourced",
                            SequenceNumber = 6,
                            Stage = "PACKAGE BROKERING",
                            StatusName = "Brokerage - Supplier Sourced",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 10,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "PricingAgreed",
                            SequenceNumber = 6,
                            Stage = "PACKAGE BROKERING",
                            StatusName = "Brokerage - Pricing Agreed",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 11,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "New",
                            SequenceNumber = 7,
                            Stage = "NEW BROKERAGE APPROVAL",
                            StatusName = "Brokerage - Submitted for Approval",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 12,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Approved",
                            SequenceNumber = 8,
                            Stage = "BROKERAGE APPROVAL",
                            StatusName = "Commercials Approved",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 13,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Rejected",
                            SequenceNumber = 8,
                            Stage = "BROKERAGE APPROVAL",
                            StatusName = "Package Commercials - Rejected",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 14,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Request More Information",
                            SequenceNumber = 8,
                            Stage = "BROKERAGE APPROVAL",
                            StatusName = "Clarifying Commercials",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            PackageStatusId = 15,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDayCareStatus = true,
                            IsStatusActive = true,
                            PackageAction = "Contracted",
                            SequenceNumber = 9,
                            Stage = "CONTRACTION",
                            StatusName = "Package Contracted",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.EscortPackage", b =>
                {
                    b.Property<Guid>("EscortPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<decimal?>("EscortCostPerHour")
                        .HasColumnType("numeric");

                    b.Property<int?>("EscortHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<bool>("Friday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Monday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Saturday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sunday")
                        .HasColumnType("boolean");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<bool>("Thursday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("boolean");

                    b.HasKey("EscortPackageId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DayCarePackageId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("EscortPackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.TransportEscortPackage", b =>
                {
                    b.Property<Guid>("TransportEscortPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<bool>("Friday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Monday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Saturday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sunday")
                        .HasColumnType("boolean");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<bool>("Thursday")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("TransportEscortCostPerWeek")
                        .HasColumnType("numeric");

                    b.Property<int?>("TransportEscortHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("boolean");

                    b.HasKey("TransportEscortPackageId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DayCarePackageId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("TransportEscortPackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.TransportPackage", b =>
                {
                    b.Property<Guid>("TransportPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<bool>("Friday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Monday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Saturday")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sunday")
                        .HasColumnType("boolean");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<bool>("Thursday")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("TransportCostPerDay")
                        .HasColumnType("numeric");

                    b.Property<int?>("TransportDaysPerWeek")
                        .HasColumnType("integer");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("boolean");

                    b.HasKey("TransportPackageId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DayCarePackageId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("TransportPackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCareBrokerage.DayCareBrokerageInfo", b =>
                {
                    b.Property<Guid>("BrokerageInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CorePackageCostPerDay")
                        .HasColumnType("numeric");

                    b.Property<int>("CorePackageDaysPerWeek")
                        .HasColumnType("integer");

                    b.Property<int>("CorePackageSupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DayCareOpportunitiesCostPerHour")
                        .HasColumnType("numeric");

                    b.Property<int?>("DayCareOpportunitiesHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<int?>("DayCareOpportunitiesSupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("EscortCostPerHour")
                        .HasColumnType("numeric");

                    b.Property<int?>("EscortHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<int?>("EscortSupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TransportCostPerDay")
                        .HasColumnType("numeric");

                    b.Property<int?>("TransportDaysPerWeek")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TransportEscortCostPerWeek")
                        .HasColumnType("numeric");

                    b.Property<int?>("TransportEscortHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<int?>("TransportEscortSupplierId")
                        .HasColumnType("integer");

                    b.Property<int?>("TransportSupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("BrokerageInfoId");

                    b.HasIndex("CorePackageSupplierId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DayCareOpportunitiesSupplierId");

                    b.HasIndex("DayCarePackageId")
                        .IsUnique();

                    b.HasIndex("EscortSupplierId");

                    b.HasIndex("TransportEscortSupplierId");

                    b.HasIndex("TransportSupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("DayCareBrokerageInfo");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCareBrokerage.DayCareRequestMoreInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("InformationText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DayCareRequestMoreInformations");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCareCollege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CollegeName")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("DayCareColleges");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", b =>
                {
                    b.Property<Guid>("DayCarePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CollegeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EscortNeeded")
                        .HasColumnType("boolean");

                    b.Property<bool>("Friday")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFixedPeriodOrOngoing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThisAnImmediateService")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThisUserUnderS117")
                        .HasColumnType("boolean");

                    b.Property<bool>("Monday")
                        .HasColumnType("boolean");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("text");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<bool>("Saturday")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<bool>("Sunday")
                        .HasColumnType("boolean");

                    b.Property<int>("TermTimeConsiderationOptionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Thursday")
                        .HasColumnType("boolean");

                    b.Property<bool>("TransportEscortNeeded")
                        .HasColumnType("boolean");

                    b.Property<bool>("TransportNeeded")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("boolean");

                    b.HasKey("DayCarePackageId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PackageId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TermTimeConsiderationOptionId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("DayCarePackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackageOpportunity", b =>
                {
                    b.Property<Guid>("DayCarePackageOpportunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("OpportunitiesNeedToAddress")
                        .HasColumnType("text");

                    b.Property<int>("OpportunityLengthOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("OpportunityTimePerMonthOptionId")
                        .HasColumnType("integer");

                    b.HasKey("DayCarePackageOpportunityId");

                    b.HasIndex("DayCarePackageId");

                    b.HasIndex("OpportunityLengthOptionId");

                    b.HasIndex("OpportunityTimePerMonthOptionId");

                    b.ToTable("DayCarePackageOpportunities");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackageReclaims.DayCarePackageReclaim", b =>
                {
                    b.Property<Guid>("DayCarePackageReclaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("ReclaimAmountOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("ReclaimCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ReclaimFromId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("DayCarePackageReclaimId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DayCarePackageId");

                    b.HasIndex("ReclaimAmountOptionId");

                    b.HasIndex("ReclaimCategoryId");

                    b.HasIndex("ReclaimFromId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("DayCarePackageReclaims");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFixedPeriod")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOngoingPeriod")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThisAnImmediateService")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThisuserUnderS117")
                        .HasColumnType("boolean");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StageId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("HomeCarePackage");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackageSlots", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DayId")
                        .HasColumnType("integer");

                    b.Property<Guid>("HomeCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("text");

                    b.Property<int>("PrimaryInMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("SecondaryInMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeSlotShiftId")
                        .HasColumnType("integer");

                    b.Property<string>("WhatShouldBeDone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TimeSlotShiftId");

                    b.ToTable("HomeCarePackageSlots");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("HomeCareServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Personal Home Care",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Domestic Care",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Live-in Care",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Escort Care",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Night Owl",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Waking Nights",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 7,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Sleeping Nights",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceTypeMinutes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("HomeCareServiceTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSecondaryCarer")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeCareServiceTypeId");

                    b.ToTable("HomeCareServiceTypeMinutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 2,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 3,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 4,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 5,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 6,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 7,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "2 hours",
                            Minutes = 120
                        },
                        new
                        {
                            Id = 8,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "N/A",
                            Minutes = 0
                        },
                        new
                        {
                            Id = 9,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 10,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 11,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 12,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 13,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 14,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 15,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "2 hours",
                            Minutes = 120
                        },
                        new
                        {
                            Id = 16,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 17,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 18,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 19,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 20,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 21,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 22,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "2 hours",
                            Minutes = 120
                        },
                        new
                        {
                            Id = 23,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 24,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 25,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 26,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 27,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 28,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 29,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "2 hours",
                            Minutes = 120
                        },
                        new
                        {
                            Id = 30,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 31,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 32,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 33,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 34,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 35,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 36,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "2 hours",
                            Minutes = 120
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.TimeSlotShifts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LinkedToHomeCareServiceTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeSlotShiftName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeSlotTimeLabel")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LinkedToHomeCareServiceTypeId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("TimeSlotShifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Morning",
                            TimeSlotTimeLabel = "08:00 - 10:00",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Mid Morning",
                            TimeSlotTimeLabel = "10:00 - 12:00",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Lunch",
                            TimeSlotTimeLabel = "12:00 - 14:00",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Afternoon",
                            TimeSlotTimeLabel = "14:00 - 17:00",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Evening",
                            TimeSlotTimeLabel = "17:00 - 20:00",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Night",
                            TimeSlotTimeLabel = "20:00 - 22:00",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 7,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LinkedToHomeCareServiceTypeId = 5,
                            TimeSlotShiftName = "Night Owl",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 8,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LinkedToHomeCareServiceTypeId = 6,
                            TimeSlotShiftName = "Waking Nights",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 9,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LinkedToHomeCareServiceTypeId = 7,
                            TimeSlotShiftName = "Sleeping Nights",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.CarerType", b =>
                {
                    b.Property<int>("CarerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarerTypeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("CarerTypeName")
                        .HasColumnType("text");

                    b.HasKey("CarerTypeId");

                    b.ToTable("CarerTypes");

                    b.HasData(
                        new
                        {
                            CarerTypeId = 1,
                            CarerTypeMinutes = 30,
                            CarerTypeName = "30m Call"
                        },
                        new
                        {
                            CarerTypeId = 2,
                            CarerTypeMinutes = 45,
                            CarerTypeName = "45m Call"
                        },
                        new
                        {
                            CarerTypeId = 3,
                            CarerTypeMinutes = 60,
                            CarerTypeName = "60m+ Call"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.HomeCareApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorRole")
                        .HasColumnType("text");

                    b.Property<Guid>("HomeCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("LogSubText")
                        .HasColumnType("text");

                    b.Property<string>("LogText")
                        .HasColumnType("text");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HomeCarePackageId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeCareApprovalHistories");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.HomeCarePackageCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CarerTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostPerHour")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HomeCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<int>("HomeCareServiceTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("HoursPerWeek")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsSecondaryCarer")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarerTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HomeCareServiceTypeId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("HomeCarePackageCosts");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.HomeCareRequestMoreInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("HomeCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("InformationText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HomeCareRequestMoreInformations");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.HomeCareStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StageName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("HomeCareStages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "New",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Assigned",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Querying",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Supplier Sourced",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Pricing agreed",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Submitted For Approval",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCarePackageReclaims.HomeCarePackageReclaim", b =>
                {
                    b.Property<Guid>("HomeCarePackageReclaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HomeCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("ReclaimAmountOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("ReclaimCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ReclaimFromId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("HomeCarePackageReclaimId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HomeCarePackageId");

                    b.HasIndex("ReclaimAmountOptionId");

                    b.HasIndex("ReclaimCategoryId");

                    b.HasIndex("ReclaimFromId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("HomeCarePackageReclaims");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareSupplierCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CarerTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostPerHour")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HomeCareServiceTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSecondaryCarer")
                        .HasColumnType("boolean");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarerTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HomeCareServiceTypeId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("HomeCareSupplierCosts");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.FundedNursingCare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CollectorId")
                        .HasColumnType("integer");

                    b.Property<Guid>("NursingCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReclaimTargetInstitutionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollectorId");

                    b.HasIndex("NursingCarePackageId")
                        .IsUnique();

                    b.HasIndex("ReclaimTargetInstitutionId");

                    b.ToTable("FundedNursingCares");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.FundedNursingCareCollector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClaimedBy")
                        .HasColumnType("integer");

                    b.Property<string>("OptionInvoiceName")
                        .HasColumnType("text");

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClaimedBy");

                    b.ToTable("FundedNursingCareCollectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimedBy = 1,
                            OptionInvoiceName = "FNC Claimed By Supplier",
                            OptionName = "FNC Collected by Supplier"
                        },
                        new
                        {
                            Id = 2,
                            ClaimedBy = 2,
                            OptionInvoiceName = "Funded Nursing Care",
                            OptionName = "FNC Collected by Hackney"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.FundedNursingCarePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PricePerWeek")
                        .HasColumnType("decimal(13, 2)");

                    b.HasKey("Id");

                    b.ToTable("FundedNursingCarePrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveFrom = new DateTimeOffset(new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ActiveTo = new DateTimeOffset(new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PricePerWeek = 187.6m
                        },
                        new
                        {
                            Id = 2,
                            ActiveFrom = new DateTimeOffset(new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ActiveTo = new DateTimeOffset(new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PricePerWeek = 187.6m
                        },
                        new
                        {
                            Id = 3,
                            ActiveFrom = new DateTimeOffset(new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ActiveTo = new DateTimeOffset(new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PricePerWeek = 187.6m
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCareAdditionalNeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdditionalNeedsPaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("NursingCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalNeedsPaymentTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NursingCarePackageId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("NursingCareAdditionalNeeds");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCarePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CareChargeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasDischargePackage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasRespiteCare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFixedPeriod")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThisAnImmediateService")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThisUserUnderS117")
                        .HasColumnType("boolean");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaidUpTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("PreviousPaidUpTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfNursingCareHomeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfStayId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CareChargeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StageId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TypeOfNursingCareHomeId");

                    b.HasIndex("TypeOfStayId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("NursingCarePackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCareTypeOfStayOption", b =>
                {
                    b.Property<int>("TypeOfStayOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.Property<string>("OptionPeriod")
                        .HasColumnType("text");

                    b.HasKey("TypeOfStayOptionId");

                    b.ToTable("NursingCareTypeOfStayOptions");

                    b.HasData(
                        new
                        {
                            TypeOfStayOptionId = 1,
                            OptionName = "Interim",
                            OptionPeriod = "Under 6 weeks"
                        },
                        new
                        {
                            TypeOfStayOptionId = 2,
                            OptionName = "Temporary",
                            OptionPeriod = "Expected under 52 weeks"
                        },
                        new
                        {
                            TypeOfStayOptionId = 3,
                            OptionName = "Long Term",
                            OptionPeriod = "52+ weeks"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.TypeOfNursingCareHome", b =>
                {
                    b.Property<int>("TypeOfCareHomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TypeOfCareHomeName")
                        .HasColumnType("text");

                    b.HasKey("TypeOfCareHomeId");

                    b.ToTable("TypesOfNursingCareHomes");

                    b.HasData(
                        new
                        {
                            TypeOfCareHomeId = 1,
                            TypeOfCareHomeName = "Nursing Home"
                        },
                        new
                        {
                            TypeOfCareHomeId = 2,
                            TypeOfCareHomeName = "Assisted Home"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareAdditionalNeedsCost", b =>
                {
                    b.Property<Guid>("NursingCareAdditionalNeedsCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AdditionalNeedsCost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<int>("AdditionalNeedsPaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NursingCareBrokerageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("NursingCareAdditionalNeedsCostId");

                    b.HasIndex("AdditionalNeedsPaymentTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NursingCareBrokerageId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("NursingCareAdditionalNeedsCosts");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatorRole")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogSubText")
                        .HasColumnType("text");

                    b.Property<string>("LogText")
                        .HasColumnType("text");

                    b.Property<Guid>("NursingCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NursingCarePackageId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("NursingCareApprovalHistories");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareBrokerageInfo", b =>
                {
                    b.Property<Guid>("NursingCareBrokerageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasCareCharges")
                        .HasColumnType("boolean");

                    b.Property<Guid>("NursingCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("NursingCore")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("NursingCareBrokerageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NursingCarePackageId")
                        .IsUnique();

                    b.HasIndex("UpdaterId");

                    b.ToTable("NursingCareBrokerageInfos");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareRequestMoreInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("InformationText")
                        .HasColumnType("text");

                    b.Property<Guid>("NursingCarePackageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("NursingCareRequestMoreInformations");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCarePackageReclaims.NursingCarePackageReclaim", b =>
                {
                    b.Property<Guid>("NursingCarePackageReclaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("NursingCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReclaimAmountOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("ReclaimCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ReclaimFromId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("NursingCarePackageReclaimId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NursingCarePackageId");

                    b.HasIndex("ReclaimAmountOptionId");

                    b.HasIndex("ReclaimCategoryId");

                    b.HasIndex("ReclaimFromId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("NursingCarePackageReclaims");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.OpportunityLengthOption", b =>
                {
                    b.Property<int>("OpportunityLengthOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OpportunityLengthOptionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.Property<int>("TimeInMinutes")
                        .HasColumnType("integer");

                    b.HasKey("OpportunityLengthOptionId");

                    b.HasIndex("OptionName")
                        .IsUnique();

                    b.ToTable("OpportunityLengthOptions");

                    b.HasData(
                        new
                        {
                            OpportunityLengthOptionId = 1,
                            OptionName = "45 minutes",
                            TimeInMinutes = 45
                        },
                        new
                        {
                            OpportunityLengthOptionId = 2,
                            OptionName = "1 hour",
                            TimeInMinutes = 60
                        },
                        new
                        {
                            OpportunityLengthOptionId = 3,
                            OptionName = "1 hour 15 minutes",
                            TimeInMinutes = 75
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.OpportunityTimesPerMonthOption", b =>
                {
                    b.Property<int>("OpportunityTimePerMonthOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OpportunityTimePerMonthOptionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.HasKey("OpportunityTimePerMonthOptionId");

                    b.HasIndex("OptionName")
                        .IsUnique();

                    b.ToTable("OpportunityTimesPerMonthOptions");

                    b.HasData(
                        new
                        {
                            OpportunityTimePerMonthOptionId = 1,
                            OptionName = "Daily"
                        },
                        new
                        {
                            OpportunityTimePerMonthOptionId = 2,
                            OptionName = "Weekly"
                        },
                        new
                        {
                            OpportunityTimePerMonthOptionId = 3,
                            OptionName = "Monthly"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PackageType")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PackageType = "Home Care Package",
                            Sequence = 0,
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PackageType = "Residential Care Package",
                            Sequence = 0,
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PackageType = "Day Care Package",
                            Sequence = 0,
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PackageType = "Nursing Care Package",
                            Sequence = 0,
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageCostClaimer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PackageCostClaimers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Supplier"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hackney"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimAmountOption", b =>
                {
                    b.Property<int>("AmountOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AmountOptionName")
                        .HasColumnType("text");

                    b.HasKey("AmountOptionId");

                    b.ToTable("ReclaimAmountOptions");

                    b.HasData(
                        new
                        {
                            AmountOptionId = 1,
                            AmountOptionName = "Percentage"
                        },
                        new
                        {
                            AmountOptionId = 2,
                            AmountOptionName = "Fixed amount - one off"
                        },
                        new
                        {
                            AmountOptionId = 3,
                            AmountOptionName = "Fixed amount - weekly"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimCategory", b =>
                {
                    b.Property<int>("ReclaimCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ReclaimCategoryName")
                        .HasColumnType("text");

                    b.HasKey("ReclaimCategoryId");

                    b.ToTable("ReclaimCategories");

                    b.HasData(
                        new
                        {
                            ReclaimCategoryId = 1,
                            ReclaimCategoryName = "Option 1"
                        },
                        new
                        {
                            ReclaimCategoryId = 2,
                            ReclaimCategoryName = "Option 2"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimFrom", b =>
                {
                    b.Property<int>("ReclaimFromId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ReclaimFromName")
                        .HasColumnType("text");

                    b.HasKey("ReclaimFromId");

                    b.ToTable("ReclaimFroms");

                    b.HasData(
                        new
                        {
                            ReclaimFromId = 1,
                            ReclaimFromName = "NHS"
                        },
                        new
                        {
                            ReclaimFromId = 2,
                            ReclaimFromName = "CCG"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatusOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("StatusDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PackageStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusDisplayName = "Draft",
                            StatusName = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            StatusDisplayName = "New",
                            StatusName = "New"
                        },
                        new
                        {
                            Id = 3,
                            StatusDisplayName = "Submitted for Approval",
                            StatusName = "SubmittedForApproval"
                        },
                        new
                        {
                            Id = 4,
                            StatusDisplayName = "Reject Package",
                            StatusName = "Rejected"
                        },
                        new
                        {
                            Id = 5,
                            StatusDisplayName = "Clarification Needed",
                            StatusName = "ClarificationNeeded"
                        },
                        new
                        {
                            Id = 6,
                            StatusDisplayName = "Approved",
                            StatusName = "Approved"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PrimarySupportReason", b =>
                {
                    b.Property<int>("PrimarySupportReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CederBudgetCode")
                        .HasColumnType("text");

                    b.Property<string>("PrimarySupportReasonName")
                        .HasColumnType("text");

                    b.HasKey("PrimarySupportReasonId");

                    b.ToTable("PrimarySupportReasons");

                    b.HasData(
                        new
                        {
                            PrimarySupportReasonId = 1,
                            CederBudgetCode = "Ceder Budget Code 1",
                            PrimarySupportReasonName = "Primary Support Reason 1"
                        },
                        new
                        {
                            PrimarySupportReasonId = 2,
                            CederBudgetCode = "Ceder Budget Code 2",
                            PrimarySupportReasonName = "Primary Support Reason 2"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCareAdditionalNeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdditionalNeedsPaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("ResidentialCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalNeedsPaymentTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ResidentialCarePackageId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("ResidentialCareAdditionalNeeds");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCarePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasDischargePackage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasRespiteCare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFixedPeriod")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThisAnImmediateService")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThisUserUnderS117")
                        .HasColumnType("boolean");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaidUpTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("PreviousPaidUpTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfResidentialCareHomeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfStayId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StageId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TypeOfResidentialCareHomeId");

                    b.HasIndex("TypeOfStayId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("ResidentialCarePackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCareTypeOfStayOption", b =>
                {
                    b.Property<int>("TypeOfStayOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.Property<string>("OptionPeriod")
                        .HasColumnType("text");

                    b.HasKey("TypeOfStayOptionId");

                    b.ToTable("ResidentialCareTypeOfStayOptions");

                    b.HasData(
                        new
                        {
                            TypeOfStayOptionId = 1,
                            OptionName = "Interim",
                            OptionPeriod = "Under 6 weeks"
                        },
                        new
                        {
                            TypeOfStayOptionId = 2,
                            OptionName = "Temporary",
                            OptionPeriod = "Expected under 52 weeks"
                        },
                        new
                        {
                            TypeOfStayOptionId = 3,
                            OptionName = "Long Term",
                            OptionPeriod = "52+ weeks"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.TypeOfResidentialCareHome", b =>
                {
                    b.Property<int>("TypeOfCareHomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TypeOfCareHomeName")
                        .HasColumnType("text");

                    b.HasKey("TypeOfCareHomeId");

                    b.ToTable("TypesOfResidentialCareHomes");

                    b.HasData(
                        new
                        {
                            TypeOfCareHomeId = 1,
                            TypeOfCareHomeName = "Residential Care Type One"
                        },
                        new
                        {
                            TypeOfCareHomeId = 2,
                            TypeOfCareHomeName = "Residential Care Type Two"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareAdditionalNeedsCost", b =>
                {
                    b.Property<Guid>("ResidentialCareAdditionalNeedsCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AdditionalNeedsCost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<int>("AdditionalNeedsPaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ResidentialCareBrokerageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("ResidentialCareAdditionalNeedsCostId");

                    b.HasIndex("AdditionalNeedsPaymentTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ResidentialCareBrokerageId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("ResidentialCareAdditionalNeedsCosts");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatorRole")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogSubText")
                        .HasColumnType("text");

                    b.Property<string>("LogText")
                        .HasColumnType("text");

                    b.Property<Guid>("ResidentialCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ResidentialCarePackageId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("ResidentialCareApprovalHistories");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareBrokerageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasCareCharges")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ResidentialCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ResidentialCore")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ResidentialCarePackageId")
                        .IsUnique();

                    b.HasIndex("UpdaterId");

                    b.ToTable("ResidentialCareBrokerageInfos");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareRequestMoreInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("InformationText")
                        .HasColumnType("text");

                    b.Property<Guid>("ResidentialCarePackageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ResidentialCareRequestMoreInformations");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCarePackageReclaims.ResidentialCarePackageReclaim", b =>
                {
                    b.Property<Guid>("ResidentialCarePackageReclaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("ReclaimAmountOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("ReclaimCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ReclaimFromId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResidentialCarePackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("ResidentialCarePackageReclaimId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ReclaimAmountOptionId");

                    b.HasIndex("ReclaimCategoryId");

                    b.HasIndex("ReclaimFromId");

                    b.HasIndex("ResidentialCarePackageId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("ResidentialCarePackageReclaims");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7335e791-1d08-437a-974e-809944d29bc6"),
                            ConcurrencyStamp = "1",
                            Name = "Super Administrator",
                            NormalizedName = "SUPER ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("66e830f6-ea42-44ad-beed-bbede0ff69df"),
                            ConcurrencyStamp = "2",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("4defe6f2-09cf-43f2-8c1f-f4cad04a582d"),
                            ConcurrencyStamp = "3",
                            Name = "Social Worker",
                            NormalizedName = "SOCIAL WORKER"
                        },
                        new
                        {
                            Id = new Guid("97c46919-fd10-47f1-bcb9-fa6b513c4c83"),
                            ConcurrencyStamp = "4",
                            Name = "Broker",
                            NormalizedName = "BROKER"
                        },
                        new
                        {
                            Id = new Guid("d7cb6746-1211-4cc2-9244-f4faaef25089"),
                            ConcurrencyStamp = "5",
                            Name = "Approver",
                            NormalizedName = "APPROVER"
                        },
                        new
                        {
                            Id = new Guid("74b93ac7-1778-485d-a482-d76893f31aff"),
                            ConcurrencyStamp = "6",
                            Name = "Finance",
                            NormalizedName = "FINANCE"
                        },
                        new
                        {
                            Id = new Guid("80f1ea68-9335-4efe-b247-7aa58cc45af0"),
                            ConcurrencyStamp = "7",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StageName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("PackageStages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "New",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Assigned",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Querying",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Supplier Sourced",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Pricing agreed",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StageName = "Submitted For Approval",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FundedNursingCareCollectorId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasSupplierFrameworkContractedRates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupplierInternal")
                        .HasColumnType("boolean");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FundedNursingCareCollectorId");

                    b.HasIndex("PackageTypeId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HasSupplierFrameworkContractedRates = true,
                            IsSupplierInternal = true,
                            PackageTypeId = 1,
                            SupplierName = "ABC Limited"
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 5, 21, 9, 40, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HasSupplierFrameworkContractedRates = true,
                            IsSupplierInternal = true,
                            PackageTypeId = 1,
                            SupplierName = "XYZ Ltd"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.TermTimeConsiderationOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OptionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("text");

                    b.HasKey("OptionId");

                    b.HasIndex("OptionName")
                        .IsUnique();

                    b.ToTable("TermTimeConsiderationOptions");

                    b.HasData(
                        new
                        {
                            OptionId = 1,
                            OptionName = "N/A"
                        },
                        new
                        {
                            OptionId = 2,
                            OptionName = "Term Time"
                        },
                        new
                        {
                            OptionId = 3,
                            OptionName = "Holiday"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b3d758b-924a-482c-af77-e31711a74a2f",
                            Email = "furkan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Furkan Kuyar",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "furkan@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1f825b5f-5c65-41fb-8d9e-9d36d78fd6d8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df0c47dc-a59f-4a66-a2c0-1e844b073466",
                            Email = "duncan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Duncan Okeno",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "duncan@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            RoleId = new Guid("7335e791-1d08-437a-974e-809944d29bc6")
                        },
                        new
                        {
                            UserId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            RoleId = new Guid("4defe6f2-09cf-43f2-8c1f-f4cad04a582d")
                        },
                        new
                        {
                            UserId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            RoleId = new Guid("97c46919-fd10-47f1-bcb9-fa6b513c4c83")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.CareChargeElement", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.PackageCareCharge", "PackageCareCharge")
                        .WithMany("CareChargeElements")
                        .HasForeignKey("CareChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageCostClaimer", "ClaimCollector")
                        .WithMany()
                        .HasForeignKey("ClaimCollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.CareChargeStatus", "CareChargeStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.CareChargeType", "CareChargeType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.InvoiceCreditNote", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.CareChargeElement", "CareChargeElement")
                        .WithMany()
                        .HasForeignKey("CareChargeElementId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.InvoiceNoteChargeType", "ChargeType")
                        .WithMany()
                        .HasForeignKey("ChargeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageCostClaimer", "ClaimCollector")
                        .WithMany()
                        .HasForeignKey("ClaimCollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.InvoiceItemPriceEffect", "PriceEffect")
                        .WithMany()
                        .HasForeignKey("PriceEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "ServiceUser")
                        .WithMany()
                        .HasForeignKey("ServiceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.PackageCareCharge", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "ServiceUser")
                        .WithMany()
                        .HasForeignKey("ServiceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PrimarySupportReason", "PrimarySupportReason")
                        .WithMany()
                        .HasForeignKey("PrimarySupportReasonId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PrimarySupportReason", "PrimarySupportReason")
                        .WithMany()
                        .HasForeignKey("PrimarySupportReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "ServiceUser")
                        .WithMany()
                        .HasForeignKey("ServiceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageDetail", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackage", "Package")
                        .WithMany("Details")
                        .HasForeignKey("CarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageHistory", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackage", "CarePackage")
                        .WithMany("Histories")
                        .HasForeignKey("CarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageReclaim", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackage", "Package")
                        .WithMany("Reclaims")
                        .HasForeignKey("CarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageSettings", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackage", "Package")
                        .WithOne("CarePackageSettings")
                        .HasForeignKey("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Common.CarePackageSettings", "CarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.DayCareApprovalHistory", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", "DayCarePackage")
                        .WithMany("DayCareApprovalHistories")
                        .HasForeignKey("DayCarePackageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.DayCarePackageStatus", "PackageStatus")
                        .WithMany()
                        .HasForeignKey("PackageStatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.DayCarePackageStatus", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.EscortPackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", "DayCarePackage")
                        .WithMany()
                        .HasForeignKey("DayCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.TransportEscortPackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", "DayCarePackage")
                        .WithMany()
                        .HasForeignKey("DayCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.TransportPackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", "DayCarePackage")
                        .WithMany()
                        .HasForeignKey("DayCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCareBrokerage.DayCareBrokerageInfo", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "CorePackageSupplier")
                        .WithMany()
                        .HasForeignKey("CorePackageSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "DayCareOpportunitiesSupplier")
                        .WithMany()
                        .HasForeignKey("DayCareOpportunitiesSupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", "DayCarePackage")
                        .WithOne("DayCareBrokerageInfo")
                        .HasForeignKey("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCareBrokerage.DayCareBrokerageInfo", "DayCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "EscortSupplier")
                        .WithMany()
                        .HasForeignKey("EscortSupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "TransportEscortSupplier")
                        .WithMany()
                        .HasForeignKey("TransportEscortSupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "TransportSupplier")
                        .WithMany()
                        .HasForeignKey("TransportSupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCareCollege", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCare.DayCarePackageStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.TermTimeConsiderationOption", "TermTimeConsiderationOption")
                        .WithMany()
                        .HasForeignKey("TermTimeConsiderationOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackageOpportunity", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", "DayCarePackage")
                        .WithMany("DayCarePackageOpportunities")
                        .HasForeignKey("DayCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.OpportunityLengthOption", "OpportunityLengthOption")
                        .WithMany()
                        .HasForeignKey("OpportunityLengthOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.OpportunityTimesPerMonthOption", "OpportunityTimesPerMonthOption")
                        .WithMany()
                        .HasForeignKey("OpportunityTimePerMonthOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackageReclaims.DayCarePackageReclaim", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", null)
                        .WithMany("PackageReclaims")
                        .HasForeignKey("DayCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimAmountOption", "ReclaimAmountOption")
                        .WithMany()
                        .HasForeignKey("ReclaimAmountOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimCategory", "ReclaimCategory")
                        .WithMany()
                        .HasForeignKey("ReclaimCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimFrom", "ReclaimFrom")
                        .WithMany()
                        .HasForeignKey("ReclaimFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatusOption", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackageSlots", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "Services")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.TimeSlotShifts", "TimeSlotShift")
                        .WithMany()
                        .HasForeignKey("TimeSlotShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceTypeMinutes", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "HomeCareServiceType")
                        .WithMany("Minutes")
                        .HasForeignKey("HomeCareServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.TimeSlotShifts", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "HomeCareServiceType")
                        .WithMany()
                        .HasForeignKey("LinkedToHomeCareServiceTypeId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.HomeCareApprovalHistory", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackage", null)
                        .WithMany("HomeCareApprovalHistories")
                        .HasForeignKey("HomeCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.HomeCarePackageCost", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.CarerType", "CarerType")
                        .WithMany()
                        .HasForeignKey("CarerTypeId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "HomeCareServiceType")
                        .WithMany()
                        .HasForeignKey("HomeCareServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.HomeCareStage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCarePackageReclaims.HomeCarePackageReclaim", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackage", null)
                        .WithMany("PackageReclaims")
                        .HasForeignKey("HomeCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimAmountOption", "ReclaimAmountOption")
                        .WithMany()
                        .HasForeignKey("ReclaimAmountOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimCategory", "ReclaimCategory")
                        .WithMany()
                        .HasForeignKey("ReclaimCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimFrom", "ReclaimFrom")
                        .WithMany()
                        .HasForeignKey("ReclaimFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareSupplierCost", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCareBrokerage.CarerType", "CarerType")
                        .WithMany()
                        .HasForeignKey("CarerTypeId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "HomeCareServiceType")
                        .WithMany()
                        .HasForeignKey("HomeCareServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.FundedNursingCare", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.FundedNursingCareCollector", "FundedNursingCareCollector")
                        .WithMany()
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCarePackage", "NursingCarePackage")
                        .WithOne("FundedNursingCare")
                        .HasForeignKey("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.FundedNursingCare", "NursingCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimFrom", "ReclaimFrom")
                        .WithMany()
                        .HasForeignKey("ReclaimTargetInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.FundedNursingCareCollector", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageCostClaimer", "PackageCostClaimer")
                        .WithMany()
                        .HasForeignKey("ClaimedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCareAdditionalNeed", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.AdditionalNeedsPaymentType", "AdditionalNeedsPaymentType")
                        .WithMany()
                        .HasForeignKey("AdditionalNeedsPaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCarePackage", "NursingCarePackage")
                        .WithMany("NursingCareAdditionalNeeds")
                        .HasForeignKey("NursingCarePackageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.CareCharge.PackageCareCharge", "CareCharge")
                        .WithMany()
                        .HasForeignKey("CareChargeId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatusOption", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.TypeOfNursingCareHome", "TypeOfCareHome")
                        .WithMany()
                        .HasForeignKey("TypeOfNursingCareHomeId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCareTypeOfStayOption", "TypeOfStayOption")
                        .WithMany()
                        .HasForeignKey("TypeOfStayId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareAdditionalNeedsCost", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.AdditionalNeedsPaymentType", "AdditionalNeedsPaymentType")
                        .WithMany()
                        .HasForeignKey("AdditionalNeedsPaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareBrokerageInfo", "NursingCareBrokerageInfo")
                        .WithMany("NursingCareAdditionalNeedsCosts")
                        .HasForeignKey("NursingCareBrokerageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareApprovalHistory", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCarePackage", null)
                        .WithMany("NursingCareApprovalHistories")
                        .HasForeignKey("NursingCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareBrokerageInfo", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCarePackage", "NursingCarePackage")
                        .WithOne("NursingCareBrokerageInfo")
                        .HasForeignKey("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareBrokerage.NursingCareBrokerageInfo", "NursingCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCarePackageReclaims.NursingCarePackageReclaim", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCarePackage", null)
                        .WithMany("PackageReclaims")
                        .HasForeignKey("NursingCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimAmountOption", "ReclaimAmountOption")
                        .WithMany()
                        .HasForeignKey("ReclaimAmountOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimCategory", "ReclaimCategory")
                        .WithMany()
                        .HasForeignKey("ReclaimCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimFrom", "ReclaimFrom")
                        .WithMany()
                        .HasForeignKey("ReclaimFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Package", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCareAdditionalNeed", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.AdditionalNeedsPaymentType", "AdditionalNeedsPaymentType")
                        .WithMany()
                        .HasForeignKey("AdditionalNeedsPaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCarePackage", "ResidentialCarePackage")
                        .WithMany("ResidentialCareAdditionalNeeds")
                        .HasForeignKey("ResidentialCarePackageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatusOption", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.TypeOfResidentialCareHome", "TypeOfCareHome")
                        .WithMany()
                        .HasForeignKey("TypeOfResidentialCareHomeId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCareTypeOfStayOption", "TypeOfStayOption")
                        .WithMany()
                        .HasForeignKey("TypeOfStayId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareAdditionalNeedsCost", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.AdditionalNeedsPaymentType", "AdditionalNeedsPaymentType")
                        .WithMany()
                        .HasForeignKey("AdditionalNeedsPaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareBrokerageInfo", "ResidentialCareBrokerageInfo")
                        .WithMany("ResidentialCareAdditionalNeedsCosts")
                        .HasForeignKey("ResidentialCareBrokerageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareApprovalHistory", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCarePackage", null)
                        .WithMany("ResidentialCareApprovalHistories")
                        .HasForeignKey("ResidentialCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareBrokerageInfo", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCarePackage", "ResidentialCarePackage")
                        .WithOne("ResidentialCareBrokerageInfo")
                        .HasForeignKey("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareBrokerage.ResidentialCareBrokerageInfo", "ResidentialCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCarePackageReclaims.ResidentialCarePackageReclaim", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimAmountOption", "ReclaimAmountOption")
                        .WithMany()
                        .HasForeignKey("ReclaimAmountOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimCategory", "ReclaimCategory")
                        .WithMany()
                        .HasForeignKey("ReclaimCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageReclaims.ReclaimFrom", "ReclaimFrom")
                        .WithMany()
                        .HasForeignKey("ReclaimFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.ResidentialCarePackage", null)
                        .WithMany("PackageReclaims")
                        .HasForeignKey("ResidentialCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Stage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Supplier", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.FundedNursingCareCollector", "FundedNursingCareCollector")
                        .WithMany()
                        .HasForeignKey("FundedNursingCareCollectorId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
