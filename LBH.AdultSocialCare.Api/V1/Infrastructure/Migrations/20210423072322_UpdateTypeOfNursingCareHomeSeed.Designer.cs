// <auto-generated />
using System;
using LBH.AdultSocialCare.Api.V1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LBH.AdultSocialCare.Api.V1.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210423072322_UpdateTypeOfNursingCareHomeSeed")]
    partial class UpdateTypeOfNursingCareHomeSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HackneyId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb80"),
                            AddressLine1 = "Queens Town Road",
                            CreatorId = 0,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 117, DateTimeKind.Unspecified).AddTicks(1647), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfBirth = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 117, DateTimeKind.Unspecified).AddTicks(1657), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Furkan",
                            HackneyId = 66666,
                            LastName = "Kayar",
                            PostCode = "SW11",
                            Town = "London",
                            UpdatorId = 0
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", b =>
                {
                    b.Property<Guid>("DayCarePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("EscortNeeded")
                        .HasColumnType("bit");

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixedPeriodOrOngoing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThisAnImmediateService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThisUserUnderS117")
                        .HasColumnType("bit");

                    b.Property<bool>("Monday")
                        .HasColumnType("bit");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<bool>("Saturday")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("Sunday")
                        .HasColumnType("bit");

                    b.Property<int>("TermTimeConsiderationOptionId")
                        .HasColumnType("int");

                    b.Property<bool>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool>("TransportNeeded")
                        .HasColumnType("bit");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("bit");

                    b.HasKey("DayCarePackageId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PackageId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TermTimeConsiderationOptionId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("DayCarePackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackageOpportunity", b =>
                {
                    b.Property<Guid>("DayCarePackageOpportunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayCarePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OpportunitiesNeedToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpportunityLengthOptionId")
                        .HasColumnType("int");

                    b.Property<int>("OpportunityTimePerMonthOptionId")
                        .HasColumnType("int");

                    b.HasKey("DayCarePackageOpportunityId");

                    b.HasIndex("DayCarePackageId");

                    b.HasIndex("OpportunityLengthOptionId");

                    b.HasIndex("OpportunityTimePerMonthOptionId");

                    b.ToTable("DayCarePackageOpportunities");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsFixedPeriod")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOngoingPeriod")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThisAnImmediateService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThisuserUnderS117")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatusId");

                    b.ToTable("HomeCarePackage");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackageSlots", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<Guid>("HomeCarePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimaryInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSlotShiftId")
                        .HasColumnType("int");

                    b.Property<string>("WhatShouldBeDone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TimeSlotShiftId");

                    b.ToTable("HomeCarePackageSlots");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HomeCareServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(6691), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8319), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Personal Home Care",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8638), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8681), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Domestic Care",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8689), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8692), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Live-in Care",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8693), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8695), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Escort Care",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8696), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8699), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Night Owl",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8700), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8702), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Waking Nights",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8703), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 104, DateTimeKind.Unspecified).AddTicks(8706), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceName = "Sleeping Nights",
                            UpdatorId = 1
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceTypeMinutes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HomeCareServiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSecondaryCarer")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HomeCareServiceTypeId");

                    b.ToTable("HomeCareServiceTypeMinutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 2,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 3,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 4,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 5,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 6,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 7,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = false,
                            Label = "2 hours",
                            Minutes = 120
                        },
                        new
                        {
                            Id = 8,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "N/A",
                            Minutes = 0
                        },
                        new
                        {
                            Id = 9,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 10,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 11,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 12,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 13,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 14,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 15,
                            HomeCareServiceTypeId = 1,
                            IsSecondaryCarer = true,
                            Label = "2 hours",
                            Minutes = 120
                        },
                        new
                        {
                            Id = 16,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 17,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 18,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 19,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 20,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 21,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 22,
                            HomeCareServiceTypeId = 2,
                            IsSecondaryCarer = false,
                            Label = "2 hours",
                            Minutes = 120
                        },
                        new
                        {
                            Id = 23,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 24,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 25,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 26,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 27,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 28,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 29,
                            HomeCareServiceTypeId = 3,
                            IsSecondaryCarer = false,
                            Label = "2 hours",
                            Minutes = 120
                        },
                        new
                        {
                            Id = 30,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "30 minutes",
                            Minutes = 30
                        },
                        new
                        {
                            Id = 31,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "45 minutes",
                            Minutes = 45
                        },
                        new
                        {
                            Id = 32,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "1 hour",
                            Minutes = 60
                        },
                        new
                        {
                            Id = 33,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "1 hour 15 minutes",
                            Minutes = 75
                        },
                        new
                        {
                            Id = 34,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "1 hour 30 minutes",
                            Minutes = 90
                        },
                        new
                        {
                            Id = 35,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "1 hour 45 minutes",
                            Minutes = 105
                        },
                        new
                        {
                            Id = 36,
                            HomeCareServiceTypeId = 4,
                            IsSecondaryCarer = false,
                            Label = "2 hours",
                            Minutes = 120
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.TimeSlotShifts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LinkedToHomeCareServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TimeSlotShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeSlotTimeLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LinkedToHomeCareServiceTypeId");

                    b.ToTable("TimeSlotShifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(1199), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(1229), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Morning",
                            TimeSlotTimeLabel = "08:00 - 10:00",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2578), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2583), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Mid Morning",
                            TimeSlotTimeLabel = "10:00 - 12:00",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2624), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2625), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Lunch",
                            TimeSlotTimeLabel = "12:00 - 14:00",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2627), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2627), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Afternoon",
                            TimeSlotTimeLabel = "14:00 - 17:00",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2629), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2630), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Evening",
                            TimeSlotTimeLabel = "17:00 - 20:00",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2632), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2633), new TimeSpan(0, 0, 0, 0, 0)),
                            TimeSlotShiftName = "Night",
                            TimeSlotTimeLabel = "20:00 - 22:00",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2634), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2636), new TimeSpan(0, 0, 0, 0, 0)),
                            LinkedToHomeCareServiceTypeId = 5,
                            TimeSlotShiftName = "Night Owl",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2951), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2956), new TimeSpan(0, 0, 0, 0, 0)),
                            LinkedToHomeCareServiceTypeId = 6,
                            TimeSlotShiftName = "Waking Nights",
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2970), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 112, DateTimeKind.Unspecified).AddTicks(2971), new TimeSpan(0, 0, 0, 0, 0)),
                            LinkedToHomeCareServiceTypeId = 7,
                            TimeSlotShiftName = "Sleeping Nights",
                            UpdatorId = 1
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCarePackageCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostPerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("HomeCarePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoursPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryCarer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondaryCarer")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("HomeCarePackageCosts");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCareTypeOfStayOption", b =>
                {
                    b.Property<int>("TypeOfStayOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeOfStayOptionId");

                    b.ToTable("NursingCareTypeOfStayOptions");

                    b.HasData(
                        new
                        {
                            TypeOfStayOptionId = 1,
                            OptionName = "Interim",
                            OptionPeriod = "Under 6 weeks"
                        },
                        new
                        {
                            TypeOfStayOptionId = 2,
                            OptionName = "Temporary",
                            OptionPeriod = "Expected under 52 weeks"
                        },
                        new
                        {
                            TypeOfStayOptionId = 3,
                            OptionName = "Long Term",
                            OptionPeriod = "52+ weeks"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.TypeOfNursingCareHome", b =>
                {
                    b.Property<int>("TypeOfCareHomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeOfCareHomeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeOfCareHomeId");

                    b.ToTable("TypesOfNursingCareHomes");

                    b.HasData(
                        new
                        {
                            TypeOfCareHomeId = 1,
                            TypeOfCareHomeName = "Nursing Home"
                        },
                        new
                        {
                            TypeOfCareHomeId = 2,
                            TypeOfCareHomeName = "Assisted Home"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareAdditionalNeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsOneOffCost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeeklyCost")
                        .HasColumnType("bit");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NursingCarePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NursingCarePackageId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("NursingCareAdditionalNeeds");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCarePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasDischargePackage")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRespiteCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixedPeriod")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThisAnImmediateService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThisUserUnderS117")
                        .HasColumnType("bit");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfNursingCareHomeId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfStayId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeOfNursingCareHomeId");

                    b.HasIndex("TypeOfStayId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("NursingCarePackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.OpportunityLengthOption", b =>
                {
                    b.Property<int>("OpportunityLengthOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OpportunityLengthOptionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeInMinutes")
                        .HasColumnType("int");

                    b.HasKey("OpportunityLengthOptionId");

                    b.HasIndex("OptionName")
                        .IsUnique()
                        .HasFilter("[OptionName] IS NOT NULL");

                    b.ToTable("OpportunityLengthOptions");

                    b.HasData(
                        new
                        {
                            OpportunityLengthOptionId = 1,
                            OptionName = "45 minutes",
                            TimeInMinutes = 45
                        },
                        new
                        {
                            OpportunityLengthOptionId = 2,
                            OptionName = "1 hour",
                            TimeInMinutes = 60
                        },
                        new
                        {
                            OpportunityLengthOptionId = 3,
                            OptionName = "1 hour 15 minutes",
                            TimeInMinutes = 75
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.OpportunityTimesPerMonthOption", b =>
                {
                    b.Property<int>("OpportunityTimePerMonthOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OpportunityTimePerMonthOptionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OpportunityTimePerMonthOptionId");

                    b.HasIndex("OptionName")
                        .IsUnique()
                        .HasFilter("[OptionName] IS NOT NULL");

                    b.ToTable("OpportunityTimesPerMonthOptions");

                    b.HasData(
                        new
                        {
                            OpportunityTimePerMonthOptionId = 1,
                            OptionName = "Daily"
                        },
                        new
                        {
                            OpportunityTimePerMonthOptionId = 2,
                            OptionName = "Weekly"
                        },
                        new
                        {
                            OpportunityTimePerMonthOptionId = 3,
                            OptionName = "Monthly"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PackageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(8677), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(8691), new TimeSpan(0, 0, 0, 0, 0)),
                            PackageType = "Home Care Package",
                            Sequence = 0,
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 114, DateTimeKind.Unspecified).AddTicks(300), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 114, DateTimeKind.Unspecified).AddTicks(306), new TimeSpan(0, 0, 0, 0, 0)),
                            PackageType = "Residential Care Package",
                            Sequence = 0,
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 114, DateTimeKind.Unspecified).AddTicks(357), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 114, DateTimeKind.Unspecified).AddTicks(359), new TimeSpan(0, 0, 0, 0, 0)),
                            PackageType = "Day Care Package",
                            Sequence = 0,
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 114, DateTimeKind.Unspecified).AddTicks(362), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 114, DateTimeKind.Unspecified).AddTicks(363), new TimeSpan(0, 0, 0, 0, 0)),
                            PackageType = "Nursing Care Package",
                            Sequence = 0,
                            UpdatorId = 1
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("PackageStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(941), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(964), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusName = "New",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3714), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3728), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusName = "Package Confirmation",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3882), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3886), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusName = "Approved For Brokerage",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3896), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3900), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusName = "Brokering",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3910), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3913), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusName = "Supplier Sourced",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3923), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3926), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusName = "Commercially Approved",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        },
                        new
                        {
                            Id = 7,
                            CreatorId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3935), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 113, DateTimeKind.Unspecified).AddTicks(3937), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusName = "Contracted",
                            UpdaterId = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84")
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.TypeOfResidentialCareHome", b =>
                {
                    b.Property<int>("TypeOfCareHomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeOfCareHomeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeOfCareHomeId");

                    b.ToTable("TypesOfResidentialCareHomes");

                    b.HasData(
                        new
                        {
                            TypeOfCareHomeId = 1,
                            TypeOfCareHomeName = "Residential Care Type One"
                        },
                        new
                        {
                            TypeOfCareHomeId = 2,
                            TypeOfCareHomeName = "Residential Care Type Two"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareAdditionalNeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OneOff")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResidentialCarePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Weekly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialCarePackageId");

                    b.ToTable("ResidentialCareAdditionalNeeds");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCarePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDischargePackage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpectedStayOver52Weeks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmediateReenablementPackage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRespiteCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThisUserUnderS117")
                        .HasColumnType("bit");

                    b.Property<string>("NeedToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfResidentialCareHomeId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeOfResidentialCareHomeId");

                    b.ToTable("ResidentialCarePackages");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 114, DateTimeKind.Unspecified).AddTicks(8160), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 114, DateTimeKind.Unspecified).AddTicks(8170), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDefault = true,
                            RoleName = "Social Worker",
                            Sequence = 1,
                            UpdatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = 1,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 115, DateTimeKind.Unspecified).AddTicks(476), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 115, DateTimeKind.Unspecified).AddTicks(483), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDefault = false,
                            RoleName = "Broker",
                            Sequence = 2,
                            UpdatorId = 1
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.TermTimeConsiderationOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OptionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OptionName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OptionId");

                    b.HasIndex("OptionName")
                        .IsUnique()
                        .HasFilter("[OptionName] IS NOT NULL");

                    b.ToTable("TermTimeConsiderationOptions");

                    b.HasData(
                        new
                        {
                            OptionId = 1,
                            OptionName = "N/A"
                        },
                        new
                        {
                            OptionId = 2,
                            OptionName = "Term Time"
                        },
                        new
                        {
                            OptionId = 3,
                            OptionName = "Holiday"
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HackneyId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aee45700-af9b-4ab5-bb43-535adbdcfb84"),
                            AddressLine1 = "Queens Gate",
                            CreatorId = 0,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 116, DateTimeKind.Unspecified).AddTicks(3235), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 116, DateTimeKind.Unspecified).AddTicks(3249), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Furkan",
                            HackneyId = 1111,
                            LastName = "Kayar",
                            PostCode = "W11",
                            RoleId = 1,
                            Town = "London",
                            UpdatorId = 0
                        },
                        new
                        {
                            Id = new Guid("1f825b5f-5c65-41fb-8d9e-9d36d78fd6d8"),
                            AddressLine1 = "Nairobi",
                            CreatorId = 0,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 116, DateTimeKind.Unspecified).AddTicks(6346), new TimeSpan(0, 0, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(2021, 4, 23, 7, 23, 22, 116, DateTimeKind.Unspecified).AddTicks(6352), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Duncan",
                            HackneyId = 4444,
                            LastName = "Okeno",
                            PostCode = "W11",
                            RoleId = 2,
                            Town = "Nairobi",
                            UpdatorId = 0
                        });
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.TermTimeConsiderationOption", "TermTimeConsiderationOption")
                        .WithMany()
                        .HasForeignKey("TermTimeConsiderationOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackageOpportunity", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.DayCarePackage", "DayCarePackage")
                        .WithMany("DayCarePackageOpportunities")
                        .HasForeignKey("DayCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.OpportunityLengthOption", "OpportunityLengthOption")
                        .WithMany()
                        .HasForeignKey("OpportunityLengthOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.OpportunityTimesPerMonthOption", "OpportunityTimesPerMonthOption")
                        .WithMany()
                        .HasForeignKey("OpportunityTimePerMonthOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCarePackageSlots", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "Services")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.TimeSlotShifts", "TimeSlotShift")
                        .WithMany()
                        .HasForeignKey("TimeSlotShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceTypeMinutes", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "HomeCareServiceType")
                        .WithMany("Minutes")
                        .HasForeignKey("HomeCareServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.TimeSlotShifts", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "HomeCareServiceType")
                        .WithMany()
                        .HasForeignKey("LinkedToHomeCareServiceTypeId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCarePackageCost", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.HomeCare.HomeCareServiceType", "Services")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCareAdditionalNeed", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCarePackage", "NursingCarePackage")
                        .WithMany("NursingCareAdditionalNeeds")
                        .HasForeignKey("NursingCarePackageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.TypeOfNursingCareHome", "TypeOfCareHome")
                        .WithMany()
                        .HasForeignKey("TypeOfNursingCareHomeId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.NursingCare.NursingCareTypeOfStayOption", "TypeOfStayOption")
                        .WithMany()
                        .HasForeignKey("TypeOfStayId");

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatus", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCareAdditionalNeed", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCarePackage", null)
                        .WithMany("ResidentialCareAdditionalNeeds")
                        .HasForeignKey("ResidentialCarePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCarePackage", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.PackageStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.ResidentialCare.TypeOfResidentialCareHome", "TypeOfResidentialCareHome")
                        .WithMany()
                        .HasForeignKey("TypeOfResidentialCareHomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.User", b =>
                {
                    b.HasOne("LBH.AdultSocialCare.Api.V1.Infrastructure.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
